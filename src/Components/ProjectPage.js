import React, { useState, useEffect } from 'react';
import { collection, query, orderBy, onSnapshot } from "firebase/firestore";
import { db, auth } from '../Config/firebase';
import Task from '../Project/Project';
import AddProject from '../Project/AddProject';
import { PDFDownloadLink, Document, Page, Text, StyleSheet } from '@react-pdf/renderer';

function ProjectPage() {
    const [openAddModal, setOpenAddModal] = useState(false);
    const [tasks, setTasks] = useState([]);
    const [user, setUser] = useState(null);
    const [loading, setLoading] = useState(true); // Loading state

    // Track authentication state
    useEffect(() => {
        const unsubscribe = auth.onAuthStateChanged((user) => {
            console.log('Current user:', user);
            setUser(user);
        });
        return () => unsubscribe();
    }, []);

    // Fetch projects from Firestore
    useEffect(() => {
        const q = query(collection(db, 'projects'), orderBy('created', 'desc'));
        const unsubscribe = onSnapshot(q, (querySnapshot) => {
            setTasks(querySnapshot.docs.map(doc => ({ id: doc.id, data: doc.data() })));
            setLoading(false); // Stop loading once data is fetched
        }, (error) => {
            console.error("Error fetching projects: ", error);
            setLoading(false); // Stop loading on error
        });
        return () => unsubscribe();
    }, []);

    // Generate PDF report for projects
    const generateReport = () => (
        <Document>
            <Page style={styles.page}>
                <Text style={styles.title}>Projects Report</Text>
                {tasks.map((task) => (
                    <Text style={styles.section} key={task.id}>
                        <Text style={styles.label}>Title: </Text>
                        <Text>{task.data.title}</Text>{'\n'}
                        <Text style={styles.label}>Start Date: </Text>
                        <Text>{task.data.startDate}</Text>{'\n'}
                        <Text style={styles.label}>End Date: </Text>
                        <Text>{task.data.endDate}</Text>{'\n'}
                        <Text style={styles.label}>Status: </Text>
                        <Text>{task.data.status}</Text>{'\n'}
                    </Text>
                ))}
                <Text style={styles.footer}>
                    Generated by SK Metal Shop Project Management System
                </Text>
            </Page>
        </Document>
    );

    return (
        <div className='w-full h-full py-[6rem] px-5 flex flex-col bg-light-yellow relative'>
            <header className='text-center text-[2rem] font-xl font-open uppercase p-5 text-black'>
                <h2>Projects</h2>
            </header>

            {/* Add Project Button at the Top */}
            <div className='flex justify-center mb-5'>
                {user && user.email === 'skmetal123@gmail.com' && (
                    <button
                        className='btn btn-width bg-white text-dark-blue px-4 py-2 rounded hover:bg-blue-700 shadow-lg'
                        onClick={() => setOpenAddModal(true)}
                    >
                        Add Project +
                    </button>
                )}
            </div>

            {/* Loading Indicator */}
            {loading ? (
                <div className="text-center">Loading projects...</div>
            ) : (
                <>
                    {/* Projects Container */}
                    <div className='flex flex-wrap justify-center mb-16'>
                        {tasks.map((task) => (
                            <Task
                                key={task.id}
                                id={task.id}
                                title={task.data.title}
                                startDate={task.data.startDate}
                                endDate={task.data.endDate}
                                status={task.data.status}
                                description={task.data.description}
                                estimatedBudget={task.data.estimatedBudget}
                                specification={task.data.specification}
                                imageUrl={task.data.imageUrl}
                                userEmail={user ? user.email : null} // Pass userEmail to Task
                            />
                        ))}
                    </div>

                    {/* Download Report Button positioned at the bottom left */}
                    <div className='absolute bottom-5 left-5'>
                        {user && user.email === 'skmetal123@gmail.com' && (
                            <PDFDownloadLink
                                document={generateReport()}
                                fileName="Projects_Report.pdf"
                                style={{
                                    display: 'inline-block',
                                    width: '6cm',
                                    backgroundColor: 'white',
                                    color: '#1b3d81',
                                    padding: '0.5rem 0',
                                    textAlign: 'center',
                                    borderRadius: '0.25rem',
                                    textDecoration: 'none',
                                    fontWeight: 'bold',
                                }}
                            >
                                {({ loading }) => loading ? 'Generating...' : 'Download Report'}
                            </PDFDownloadLink>
                        )}
                    </div>
                </>
            )}

            {/* Add Project Modal */}
            {openAddModal && (
                <AddProject
                    open={openAddModal}
                    onClose={() => setOpenAddModal(false)}
                />
            )}
        </div>
    );
}

// Styles for the PDF report
const styles = StyleSheet.create({
    page: {
        padding: 30,
        fontSize: 12,
    },
    title: {
        fontSize: 20,
        marginBottom: 10,
        textAlign: 'center',
        fontWeight: 'bold',
        color: '#1b3d81',
    },
    section: {
        marginBottom: 10,
        padding: 10,
        border: '1px solid #ddd',
        borderRadius: 5,
        backgroundColor: '#f5f5dc',
    },
    label: {
        fontWeight: 'bold',
        color: '#b5a642',
    },
    footer: {
        textAlign: 'center',
        marginTop: 20,
        fontSize: 10,
        color: '#1b3d81',
    },
});

export default ProjectPage;
